package composition;

public class InstrumentTetst extends Instrument {	
	String name = "Test";
	public void play() {
		//super.play();
		System.out.println("Override");		
		System.out.println(name);
	}
	// Если изменим только тип возвращаемого значения, то получим ошибку, которую "заметит" компилятор
	//При переопределении метода права доступа к нему можно только расширить, но не сузить.
	public void /*int*/ play2() {
		System.out.println("Override2");
		/*return 0;*/
	}

	public static void main(String[] args) {
		
		InstrumentTetst it = new InstrumentTetst();
		Instrument i = new Instrument();
		
		/*Преобразование от производного типа к базовому требует движения вверх по диаграмме,
		 *  поэтому часто называется восходяща преобразованием. Восходящее преобразование всегда безопасно,
		 *   так как это переход от конкретного типа к более общему типу. Иначе говоря,
		 *    производный класс является надстройкой базового класса. 
		
		i = it; */
		/*Единственное, что может произойти с интерфейсом класса при восходящем преобразовании,
		 *  — потеря методов, но никак не их приобретение. Именно поэтому компилятор 
		 *  всегда разрешает выполнять восходящее преобразование, не требуя явных преобразований
		 
		i.play11();
		it.play11();
		*/
		// имеем доступ к приватному методу супер класса 
		//через обьект подкласса используя статический(или обычный) метод в суперклассе
		Instrument.tune(it);
		new Instrument().tune1(it);
		it.play();
		Instrument i1 =  new InstrumentTetst();
		i1.play();
		i.play();
		/*Важно понимать, что доступные члены определяются типом ссылочной переменной,
		 *  а не типом объекта, на который она ссылается. То есть при присваивании ссылочной 
		 *  переменной супер класса ссылки на объект подкласса доступ предоставляется только к 
		 *  указанным в ней членам объекта, определенного супер классом. Если немного подумать,
		 *   это становится понятным — суперклассу не известно, что именно подкласс добавляет в него.
		 *   Это касается только случаев если метод не переопределяется в подкласе!!!
		 */
		it.play2();
		
		
	}

}
